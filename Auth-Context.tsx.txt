import { createContext, useContext, useState, useEffect } from "react";
import { createClient } from "@supabase/supabase-js";

// Supabase initialization (replace with your keys)
const SUPABASE_URL = "https://REMOVED_SUPABASE_URL";
const SUPABASE_ANON_KEY = "REMOVED_SUPABASE_KEY9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt2amJta2FmZGpvcHZnc2NkamVzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUyMTU3NjEsImV4cCI6MjA2MDc5MTc2MX0.oyeWO5ysh1k6k77oNpCl8KUcP6Hodll8E6Cb8mnTyy8";
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

// Create the AuthContext
const AuthContext = createContext();

// AuthProvider component
export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  // On mount, check for the current user session
  useEffect(() => {
    const session = supabase.auth.session();
    setUser(session?.user ?? null);
    setLoading(false);

    const { data: authListener } = supabase.auth.onAuthStateChange(
      (event, session) => {
        setUser(session?.user ?? null);
      }
    );

    return () => {
      authListener.unsubscribe();
    };
  }, []);

  return (
    <AuthContext.Provider value={{ user, loading }}>
      {!loading && children}
    </AuthContext.Provider>
  );
};

// Custom hook to access the AuthContext
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};
